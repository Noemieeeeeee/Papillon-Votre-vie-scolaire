name: Application deployment

on:
  push:
    branches:
      - master
      - beta
  workflow_dispatch:

jobs:
  initialize:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
        
      - name: Get VERSION_CODE
        id: commit-count
        run: |
          let nb=$(git rev-list HEAD --count)+500
          echo "COUNT=$nb" >> $GITHUB_OUTPUT
        
      - name: Get VERSION_NUMBER
        id: version-number
        run: |
          ver="$(git describe --tags --dirty)"
          echo "VERSION=${ver}" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: npm

      - name: Get deploy type
        id: deploy-type
        run: |
          if [ "${{ github.ref }}" == "refs/heads/master" ]; then
            echo "TYPE=prod" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/beta" ]; then
            echo "TYPE=beta" >> $GITHUB_OUTPUT
          else
            echo "TYPE=unknown" >> $GITHUB_OUTPUT
          fi
          
      - name: Update version number (package.json)
        run:  |
          ver="${{ steps.version-number.outputs.VERSION }}"
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          if [ '$(expr length "$ver")' == '5' ]; then
            npm version "$ver" --no-git-tag-version
            echo "GH_RELEASE=true" >> $GITHUB_ENV
          else
            npm version "$ver" --no-git-tag-version
            echo "GH_RELEASE=false" >> $GITHUB_ENV
          fi
          git commit -am "Automatic update"
          git push
    outputs:
      VERSION_CODE: ${{ steps.commit-count.outputs.COUNT }}
      VERSION_NUMBER: ${{ steps.version-number.outputs.VERSION }}
      DEPLOY_TYPE: ${{ steps.deploy-type.outputs.TYPE }}


  deploy_android:
    needs: initialize
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup Java
        run: |
          brew tap AdoptOpenJDK/openjdk
          brew install --cask adoptopenjdk15

          echo "JAVA_HOME=$(/usr/libexec/java_home -v 15)" >> $GITHUB_ENV
          echo ${{ env.JAVA_HOME }}
          java -version

      - name: Setup Android CLI
        run: |
          brew install --cask android-commandlinetools
          sdkmanager --update
          set +o pipefail

          yes | sdkmanager --licenses
          yes | sdkmanager --install "platform-tools"
          yes | sdkmanager --install "build-tools;30.0.2"
          yes | sdkmanager --install "platforms;android-30"

          sdkmanager --list_installed
          set -o pipefail

      - name: Setup Android Builder
        run: |
          echo "ANDROID_HOME=$(brew --prefix)/share/android-commandlinetools" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$(brew --prefix)/share/android-commandlinetools" >> $GITHUB_ENV
          echo "APP_VERSION_CODE=${{ needs.initialize.outputs.VERSION_CODE  }}" >> $GITHUB_ENV
          echo "APP_VERSION_NUMBER=${{ needs.initialize.outputs.VERSION_NUMBER }}" >> $GITHUB_ENV
          chmod +x ./android/gradlew;

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: npm

      - name: Setup dependencies
        run: |
          npm i -g @ionic/cli
          npm i --prefer-offline --no-audit

      - name: Update release Canal
        uses: maxgfr/github-change-json@v0.0.21*
        with:
          file: "package.json"
          key: "canal"
          value: ${{ needs.initialize.outputs.DEPLOY_TYPE }}
          commit: false

      - name: Ionic Capacitor Sync
        run: |
          npm version ${{ needs.initialize.outputs.VERSION_NUMBER }} --no-git-tag-version
          ionic capacitor sync android --prod
     
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7.2
          bundler-cache: true

      - name: Cache bundle dependencies
        uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: ${{ runner.os }}-gems-

      - name: Decrypt Android keys
        run: sh ./.github/scripts/decrypt_android_keys.sh
        env:
          KEYS_SECRET_PASSPHRASE: ${{ secrets.KEYS_SECRET_PASSPHRASE }}  

      - name: Export Data to Fastlane
        run: |
          echo "KEY_STORE=$GITHUB_WORKSPACE/android/fastlane/logi12-prnplus.jks" >> $GITHUB_ENV
          echo "KEY_STORE_PASSWORD=${{ secrets.KEY_STORE_PASSWORD}}" >> $GITHUB_ENV
          echo "KEY_ALIAS=${{ secrets.KEY_ALIAS }}" >> $GITHUB_ENV
          echo "KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}" >> $GITHUB_ENV
          echo "PLAY_CREDENTIALS_JSON=$GITHUB_WORKSPACE/android/fastlane/play_store.json" >> $GITHUB_ENV
          echo "GRADLE_FILE=$GITHUB_WORKSPACE/android/app/build.gradle" >> $GITHUB_ENV

      - name: Download bundle dependencies
        run: |
          gem install bundler:2.0.2
          bundle config path vendor/bundle
          bundle install
          bundle exec gem install "fastlane-plugin-versioning_android"
        working-directory: android/fastlane

      - name: Build and deploy
        run: |
          echo "LC_ALL=fr_FR.UTF-8" >> $GITHUB_ENV
          echo "LANG=fr_FR.UTF-8" >> $GITHUB_ENV
          bundle exec fastlane deploy
        working-directory: android/fastlane

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: Android App (APK) - ${{ needs.initialize.outputs.VERSION_NUMBER }}
          path: ${{ env.APK_LOCATION }}
          retention-days: 3


  deploy_ios:
    needs: initialize
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: npm

      - name: Init XCode SDK
        run: xcodebuild -sdk -version

      - name: Setup dependencies
        run: |
          npm i -g @ionic/cli
          npm i --prefer-offline --no-audit

      - name: Update release Canal
        uses: maxgfr/github-change-json@v0.0.21*
        with:
          file: "package.json"
          key: "canal"
          value: ${{ needs.initialize.outputs.DEPLOY_TYPE }}
          commit: false

      - name: Ionic Capacitor Sync
        run: |
          npm version ${{ needs.initialize.outputs.VERSION_NUMBER }} --no-git-tag-version
          ionic capacitor sync ios --prod
     
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7.2
          bundler-cache: true

      - name: Cache bundle dependencies
        uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: ${{ runner.os }}-gems-

      - name: Setup SSH Keys and known_hosts for Fastlane Match
        run: |
            SSH_PATH="$HOME/.ssh"
            mkdir -p "$SSH_PATH"
            touch "$SSH_PATH/known_hosts"    
            echo "${{ secrets.SSH_KEY }}" > "$SSH_PATH/id_rsa"    
            chmod 700 "$SSH_PATH"
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            chmod 600 "$SSH_PATH/known_hosts"
            chmod 600 "$SSH_PATH/id_rsa"    
            eval $(ssh-agent)
            ssh-add "$SSH_PATH/id_rsa"

      - name: Decrypt iOS keys
        run: sh ./.github/scripts/decrypt_ios_keys.sh
        env:
          KEYS_SECRET_PASSPHRASE: ${{ secrets.KEYS_SECRET_PASSPHRASE }}  

      - name: Export Data to Fastlane
        run: |
          echo "APP_STORE_API_KEY_ID=${{ secrets.APP_STORE_API_KEY_ID }}" >> $GITHUB_ENV
          echo "APP_STORE_API_KEY_ISSUER_ID=${{ secrets.APP_STORE_API_KEY_ISSUER_ID }}" >> $GITHUB_ENV
          echo "APP_STORE_API_KEY=${{ secrets.APP_STORE_API_KEY }}" >> $GITHUB_ENV
          echo "CERTIFICATE_STORE_GITHUB_URL=${{ secrets.CERTIFICATE_STORE_GITHUB_URL }}" >> $GITHUB_ENV
          echo "MATCH_PASSWORD=${{ secrets.MATCH_CERTIFICATE_STORE_PASSWORD }}" >> $GITHUB_ENV
          echo "APP_IOS_PASSWORD=${{ secrets.APP_IOS_PASSWORD }}" >> $GITHUB_ENV
          echo "GIT_USER_TOKEN=${{ secrets.GIT_USER_TOKEN }}" >> $GITHUB_ENV
          echo "GIT_USER_EMAIL=${{ secrets.GIT_USER_EMAIL }}" >> $GITHUB_ENV
          echo "APPLE_ID=${{ secrets.APPLE_ID }}" >> $GITHUB_ENV
          echo "ITC_TEAM_ID=${{ secrets.ITC_TEAM_ID }}" >> $GITHUB_ENV
          echo "ITC_TEAM_NAME=${{ secrets.ITC_TEAM_NAME }}" >> $GITHUB_ENV
          echo "APPLE_DEVELOPER_TEAM_ID=${{ secrets.APPLE_DEVELOPER_TEAM_ID }}" >> $GITHUB_ENV
          echo "APP_VERSION_CODE=${{ needs.initialize.outputs.VERSION_CODE  }}" >> $GITHUB_ENV
          echo "APP_VERSION_NUMBER=${{ needs.initialize.outputs.VERSION_NUMBER }}" >> $GITHUB_ENV

      - name: Download bundle dependencies
        run: |
          gem install bundler:2.0.2
          bundle config path vendor/bundle
          bundle install
        working-directory: ios/app/fastlane

      - name: Build and deploy
        run: |
          echo "LC_ALL=fr_FR.UTF-8" >> $GITHUB_ENV
          echo "LANG=fr_FR.UTF-8" >> $GITHUB_ENV
          bundle exec fastlane ${{ needs.initialize.outputs.DEPLOY_TYPE }} 
        working-directory: ios/app/fastlane

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: iOS App - ${{ needs.initialize.outputs.VERSION_NUMBER }}
          path: ${{ env.IPA_LOCATION }}
          retention-days: 3
  

  summary_and_release:
    needs: [initialize, deploy_android, deploy_ios]
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Push to Github release
        if: ${{ env.GH_RELEASE }} == 'true'
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          artifacts: ${{ env.APK_LOCATION }} #, ${{ env.IPA_LOCATION }}
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ needs.initialize.outputs.VERSION_NUMBER }}
          name: Papillon - ${{ needs.initialize.outputs.VERSION_NUMBER }}
          draft: true
          generateReleaseNotes: true
          makeLatest: true
          body: Release de version ${{ needs.initialize.outputs.VERSION_NUMBER }}

      - name: Deploy summary
        run: |
          echo "### Résumé de déploiement :rocket:" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.initialize.outputs.DEPLOY_TYPE }}" == "beta" ]; then
            echo "#### En beta :construction:" >> $GITHUB_STEP_SUMMARY
          else
            echo "#### En production :green_heart:" >> $GITHUB_STEP_SUMMARY
          fi
          echo "Date de déploiement : $(date)" >> $GITHUB_STEP_SUMMARY
          echo "Lien de la release sur GitHub : ${{ steps.create_release.outputs.html_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Android :robot:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Version : ${{ needs.initialize.outputs.VERSION_NUMBER }}" >> $GITHUB_STEP_SUMMARY
          echo "Code de version : ${{ needs.initialize.outputs.VERSION_CODE }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### iOS :apple:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Version : ${{ needs.initialize.outputs.VERSION_NUMBER }}" >> $GITHUB_STEP_SUMMARY
          echo "Code de version : ${{ needs.initialize.outputs.VERSION_CODE }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.initialize.outputs.DEPLOY_TYPE }}" == "beta" ]; then
            echo "Déployé sur TestFlight" >> $GITHUB_STEP_SUMMARY
          else:
            echo "Déployé sur l'AppStore" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "Fin de rapport de déploiement" >> $GITHUB_STEP_SUMMARY
          echo "(c) 2023 - PapillonApp" >> $GITHUB_STEP_SUMMARY
          

